%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT, LPARAN, RPARAN, LBRACKET, RBRACKET, SEMICOLON, ASSIGN, MULTIPLIER, PLUS, SUB, DIVIDER, MODULAR, LESS, GREATER, LEQ, GEQ, NOTEQ, EQ, COMMA, RETURN, IF, ELSE, WHILE;

%typeof program = "Program";
%typeof programStmtList = "List";
%typeof programStmt = "ProgramStmt";
%typeof functionDecl = "FunctionDecl";
%typeof functionCall = "Expr";
%typeof stmt = "Stmt";
%typeof stmtList = "List";
%typeof block = "Block";
%typeof idDeclStmt = "IdDeclStmt";
%typeof idDecl = "IdDecl";
%typeof assignment = "Assignment";
%typeof returnStmt = "ReturnStmt";
%typeof ifElse = "IfElse";
%typeof while = "While";
%typeof functionCallStmt = "FunctionCallStmt";
%typeof idUse = "IdUse";
%typeof numeral = "Numeral";
%typeof expr = "Expr";
%typeof neg = "Expr";
%typeof comparator = "Expr";
%typeof factor = "Expr";
%typeof posFactor = "Expr";
%typeof term = "Expr";
%typeof paren = "Expr";
%typeof paramList = "List";
%typeof paramDeclareList = "List";
%typeof less = "Less";
%typeof greater = "Greater";
%typeof lessEqual = "LessEq";
%typeof greaterEqual = "GreaterEq";
%typeof equal = "Eq";
%typeof notEqual = "NotEq";
%typeof mul = "Mul";
%typeof add = "Add";
%typeof sub = "Sub";
%typeof div = "Div";
%typeof mod = "Mod";
%typeof intType = "IntType";

%goal program;

program =
  programStmtList.a {: return new Program(a); :}
  | /*epsilon*/ {: return new Program(); :};

programStmtList =
  programStmt.stmt {: return new List().add(stmt); :}
  | programStmtList.list programStmt.b {: return list.add(b); :}
  ;

programStmt =
  functionDecl
  ;

functionDecl =
  idDecl.id LPARAN paramDeclareList.a RPARAN block.b {: return new FunctionDecl(id, a, b); :}
  | idDecl.id LPARAN RPARAN block.b {: return new FunctionDecl(id, new List(), b); :}
  ;

paramDeclareList =
  idDecl.a {: return new List().add(a); :}
  | paramDeclareList.a COMMA idDecl.b {: return a.add(b); :}
  ;

block =
    LBRACKET stmtList.list RBRACKET {: return new Block(list); :}
    | LBRACKET RBRACKET {: return new Block(); :} ;

stmtList =
    stmt.a {: return new List().add(a); :}
    | stmtList.a stmt.b {: return a.add(b); :}
    ;

stmt =
     idDeclStmt.a SEMICOLON {: return a; :}
     | assignment.a SEMICOLON {: return a; :}
     | returnStmt.a SEMICOLON {: return a; :}
     | ifElse.a {: return a; :}
     | while.a {: return a; :}
     | functionCallStmt.a SEMICOLON {: return a; :}
     ;

assignment =
  idUse.a ASSIGN expr.b {: return new Assignment(a,b); :}
  | idDecl.a ASSIGN expr.b {: return new Assignment(a,b); :}
  ;

idDeclStmt = idDecl.a {: return new IdDeclStmt(a); :};

returnStmt = RETURN expr.a {: return new ReturnStmt(a); :};

while = WHILE paren.a block.b {: return new While(a,b); :};

ifElse =
  IF paren.a block.b {: return new IfElse(a,b, new Opt()); :}
  | IF paren.a block.b ELSE block.c {: return new IfElse(a,b,new Opt(c)); :}
  ;

functionCallStmt = functionCall.a {: return new FunctionCallStmt(a); :};

expr =
  comparator
  | less
  | greater
  | lessEqual
  | greaterEqual
  | equal
  | notEqual
  ;

functionCall =
  idUse.a LPARAN paramList.b RPARAN {: return new FunctionCall(a, b); :}
  | idUse.a LPARAN RPARAN {: return new FunctionCall(a, new List()); :}
  ;

paramList =
  expr.a {: return new List().add(a); :}
  | paramList.a COMMA expr.b {: return a.add(b); :}
  ;


less = comparator.a LESS comparator.b {: return new Less(a, b); :};

greater = comparator.a GREATER comparator.b {: return new Greater(a, b); :};

lessEqual = comparator.a LEQ comparator.b {: return new LessEq(a, b); :};

greaterEqual = comparator.a GEQ comparator.b {: return new GreaterEq(a, b); :};

notEqual = comparator.a NOTEQ comparator.b {: return new NotEq(a, b); :};

equal = comparator.a EQ comparator.b {: return new Eq(a, b); :};

comparator =
    term
    | add
    | sub
    ;

add = comparator.a PLUS term.b {: return new Add(a, b); :};

sub = comparator.a SUB term.b {: return new Sub(a, b); :};

term =
    factor
    | div
    | mod
    | mul
    ;

mul = term.a MULTIPLIER factor.b {: return new Mul(a, b); :};

div = term.a DIVIDER factor.b {: return new Div(a, b); :};

mod = term.a MODULAR factor.b {: return new Mod(a, b); :};

posFactor =
  numeral
  | functionCall
  | idUse
  | paren
  ;

factor =
  posFactor
  | SUB posFactor.a {: return new Neg(a); :}
  ;

paren =
  LPARAN expr.a RPARAN {: return a; :};

idUse = ID.id {: return new IdUse(id); :};

idDecl = intType.a ID.id {: return new IdDecl(a, id); :} ;

intType = INT {: return new IntType(); :};

numeral =
  NUMERAL.a {: return new Numeral(a); :};
