%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT, LPARAN, RPARAN, LBRACKET, ASSIGN, MULTIPLIER, PLUS, SUB, DIVIDER, MODULAR, LESS, GREATER, LEQ, GEQ, NOTEQ, EQ, COMMA, RETURN, RETURNS, IF, ELSE, WHILE, ARTICLE, CALLED, VARIABLE, EXPRESSION, DOFOLLOWING, ENDING, NEG, VALUEOFFUNC, USESARGS, USINGSARGS, FUNCTION, AND;

%typeof program = "Program";
%typeof programStmtList = "List";
%typeof programStmt = "ProgramStmt";
%typeof functionDecl = "FunctionDecl";
%typeof functionCall = "Expr";
%typeof stmt = "Stmt";
%typeof stmtList = "List";
%typeof block = "Block";
%typeof idDeclStmt = "IdDeclStmt";
%typeof idDecl = "IdDecl";
%typeof assignment = "Assignment";
%typeof returnStmt = "ReturnStmt";
%typeof ifElse = "IfElse";
%typeof while = "While";
%typeof functionCallStmt = "FunctionCallStmt";
%typeof idUse = "IdUse";
%typeof numeral = "Numeral";
%typeof expr = "Expr";
%typeof neg = "Expr";
%typeof comparator = "Expr";
%typeof factor = "Expr";
%typeof posFactor = "Expr";
%typeof term = "Expr";
%typeof paren = "Expr";
%typeof paramList = "List";
%typeof paramDeclareList = "List";
%typeof less = "Less";
%typeof greater = "Greater";
%typeof lessEqual = "LessEq";
%typeof greaterEqual = "GreaterEq";
%typeof equal = "Eq";
%typeof notEqual = "NotEq";
%typeof mul = "Mul";
%typeof add = "Add";
%typeof sub = "Sub";
%typeof div = "Div";
%typeof mod = "Mod";
%typeof intType = "IntType";

%goal program;

program =
  programStmtList.a {: return new Program(a); :}
  | /*epsilon*/ {: return new Program(); :};

programStmtList =
  programStmt.stmt {: return new List().add(stmt); :}
  | programStmtList.list programStmt.b {: return list.add(b); :}
  ;

programStmt =
  functionDecl
  ;

functionDecl =
  idDecl.id USINGSARGS paramDeclareList.a ENDING IT DO FOLLOWING block.b {: return new FunctionDecl(id, a, b); :}
  | idDecl.id ENDING IT DO FOLLOWING block.b {: return new FunctionDecl(id, new List(), b); :}
  ; /* Watch out for potential problems in paramdeclareList. Also not using idDecl.id */

paramDeclareList =
  idDecl.a {: return new List().add(a); :}
  | paramDeclareList.a COMMA idDecl.b {: return a.add(b); :}
  ;

block =
    LBRACKET stmtList.list ENDING {: return new Block(list); :}
    | LBRACKET ENDING {: return new Block(); :} ;

stmtList =
    stmt.a {: return new List().add(a); :}
    | stmtList.a stmt.b {: return a.add(b); :}
    ;

stmt =
     DASH idDeclStmt.a ENDING {: return a; :}
     | DASH assignment.a ENDING {: return a; :}
     | DASH returnStmt.a ENDING {: return a; :}
     | DASH ifElse.a ENDING {: return a; :}
     | DASH while.a ENDING {: return a; :}
     | DASH functionCallStmt.a ENDING {: return a; :}
     ;

assignment =
  idUse.a ASSIGN expr.b {: return new Assignment(a,b); :}
  | idDecl.a AND ASSIGN expr.b {: return new Assignment(a,b); :}
  ;

idDeclStmt = idDecl.a {: return new IdDeclStmt(a); :};

returnStmt = RETURN expr.a {: return new ReturnStmt(a); :};

while = WHILE expr.a ENDING DO FOLLOWING block.b {: return new While(a,b); :};

//TODO: We changed from paren to expr. Test if correct.
ifElse =
  IF expr.a DO FOLLOWING block.b {: return new IfElse(a,b, new Opt()); :}
  | IF expr.a DO FOLLOWING block.b ELSE block.c {: return new IfElse(a,b,new Opt(c)); :}
  ;

functionCallStmt = DO functionCall.a {: return new FunctionCallStmt(a); :};

expr =
  comparator
  | less
  | greater
  | lessEqual
  | greaterEqual
  | equal
  | notEqual
  ;

functionCall =
  OFFUNC CALLED idUse.a USESARGS paramList.b {: return new FunctionCall(a, b); :}
  | OFFUNC CALLED idUse.a {: return new FunctionCall(a, new List()); :}
  ;

paramList =
  expr.a {: return new List().add(a); :}
  | paramList.a COMMA expr.b {: return a.add(b); :}
  ;


less = comparator.a LESS comparator.b {: return new Less(a, b); :};

greater = comparator.a GREATER comparator.b {: return new Greater(a, b); :};

lessEqual = comparator.a LEQ comparator.b {: return new LessEq(a, b); :};

greaterEqual = comparator.a GEQ comparator.b {: return new GreaterEq(a, b); :};

notEqual = comparator.a NOTEQ comparator.b {: return new NotEq(a, b); :};

equal = comparator.a EQ comparator.b {: return new Eq(a, b); :};

comparator =
    term
    | add
    | sub
    ;

add = comparator.a PLUS term.b {: return new Add(a, b); :};

sub = comparator.a SUB term.b {: return new Sub(a, b); :};

term =
    factor
    | div
    | mod
    | mul
    ;

mul = term.a MULTIPLIER factor.b {: return new Mul(a, b); :};

div = term.a DIVIDER factor.b {: return new Div(a, b); :};

mod = term.a MODULAR factor.b {: return new Mod(a, b); :};

posFactor =
  numeral
  | functionCall
  | idUse
  | paren
  ;

factor =
  posFactor
  | NEG posFactor.a {: return new Neg(a); :}
  ;

paren =
  EXPRESSION COMMA expr.a COMMA {: return a; :};

idUse = VARIABLE CALLED ID.id {: return new IdUse(id); :};

idDecl =
  ARTICLE intType.a CALLED ID.id {: return new IdDecl(a, id); :}
  | ARTICLE FUNCTION CALLED ID.id AND RETURNS ARTICLE intType.a {: return new IdDecl(a, id); :}
  ;
/* For functions: A function that is called xx and returns an integer. It uses the arguments of ddd, dd and runs the following code: ARTICLE FUNCTION CALLED ID.id */

intType = INT {: return new IntType(); :};

numeral =
  NUMERAL.a {: return new Numeral(a); :};
