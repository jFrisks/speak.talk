aspect NameAnalysis {
	syn IdDecl IdUse.decl() = lookup(getID());
	inh IdDecl IdUse.lookup(String name);


	eq Program.getChild().lookup(String name) = unknownDecl();
	inh IdDecl Block.lookup(String name);

	syn IdDecl Block.localLookup(String name, int until) {
		for (int i = 0; i <= until; i++) {
			//Go through all stmt and and get stmt(i) decls
			if (!getStmt(i).decl().isUnknown()) {
                return getStmt(i).decl();
            }
		}
		return unknownDecl();
	}

	syn IdDecl Stmt.decl() = unknownDecl();
	syn IdDecl IdDeclStmt.decl() = getIdDecl();
	syn IdDecl Assignment.decl(){
	    ASTNode left = getLeft();
	    if(left instanceof IdDecl){
	        return (IdDecl) left;
	    }else{
	        return unknownDecl();
	    }
	}

	eq Block.getStmt(int index).lookup(String name) {
		IdDecl decl = localLookup(name, index);
		return !decl.isUnknown() ? decl : lookup(name);
	}

	inh IdDecl IdDecl.lookup(String name);
	syn boolean IdDecl.isMultiDeclared() = lookup(getID()) != this;
}

/*
aspect CircularDefinitions {
 	syn boolean IdUse.isCircular() = inExprOf(decl());
 	inh boolean IdUse.inExprOf(IdDecl decl);
 	inh boolean Assignment.inExprOf(IdDecl decl);
 	eq Assignment.getExpr().inExprOf(IdDecl decl)
 		= getIdDecl() == decl || inExprOf(decl);
 	eq Program.getChild().inExprOf(IdDecl decl) = false;
 }
 */