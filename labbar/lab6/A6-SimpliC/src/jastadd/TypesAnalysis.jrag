aspect TypesAnalysis{
    syn Type IdDecl.type() = intType();

    //expected type för undefined kommer förstöra när språket expanderas. Ytterliggare type för undefined krävs för att hitta fel korrekt
    /*syn Type Expr.type() {
        if (this instanceof Eq || this instanceof Neg || this instanceof Less || this instanceof Greater || this instanceof LessEq || this instanceof GreaterEq || this instanceof NotEq) {
            return boolType();
        } else if (this instanceof Mul || this instanceof Div || this instanceof Add || this instanceof Sub || this instanceof Mod || this instanceof IdUse || this instanceof Numeral || this instanceof FunctionCall) {
            return intType();
        }
        return unknownType();
    }*/

    //if unknownType we return expectedType to limit error propagation.
    syn Type Expr.type() = unknownType();
    syn Type Add.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type Sub.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type Mul.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type Div.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type Mod.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type IdUse.type() = intType();
    syn Type Numeral.type() = intType();
    syn Type FunctionCall.type() {
        for (Expr e : getExprList()) {
            if (e.type() != intType()) {
                return unknownType();
            }
        }
        return intType();
    }

    syn Type Neg.type() = getExpr().type() == unknownType() ? expectedType() : getExpr().type();

    //working for both two ints or two bools!
    //syn Type Eq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == getRight().type()) ? expectedType() : unknownType();
    //syn Type NotEq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == getRight().type()) ? expectedType() : unknownType();
    syn Type Eq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == intType() && getRight().type() == intType())) ? expectedType() : unknownType();
    syn Type NotEq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == intType() && getRight().type() == intType())) ? expectedType() : unknownType();

    //<, >, <=, >= expected child to be ints!
    syn Type Less.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == intType() && getRight().type() == intType()) ? expectedType() : unknownType();
    syn Type Greater.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == intType() && getRight().type() == intType()) ? expectedType() : unknownType();
    syn Type LessEq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == intType() && getRight().type() == intType()) ? expectedType() : unknownType();
    syn Type GreaterEq.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || getLeft().type() == intType() && getRight().type() == intType()) ? expectedType() : unknownType();

    syn Type Expr.expectedType() = type();
    syn Type Mul.expectedType() = intType();
    syn Type Add.expectedType() = intType();
    syn Type Sub.expectedType() = intType();
    syn Type Div.expectedType() = intType();
    syn Type Mod.expectedType() = intType();
    syn Type IdUse.expectedType() = intType();
    syn Type Numeral.expectedType() = intType();
    syn Type FunctionCall.expectedType() = intType();

    syn Type Neg.expectedType() = getExpr().expectedType();

    syn Type Less.expectedType() = boolType();
    syn Type Greater.expectedType() = boolType();
    syn Type LessEq.expectedType() = boolType();
    syn Type GreaterEq.expectedType() = boolType();
    syn Type Eq.expectedType() = boolType();
    syn Type NotEq.expectedType() = boolType();

    syn Type Stmt.expectedType() = unknownType();
    syn Type Assignment.expectedType() = intType();
    syn Type IdDeclStmt.expectedType() = intType();
    syn Type FunctionCallStmt.expectedType() = intType();
    syn Type IfElse.expectedType() = boolType();
    syn Type While.expectedType() = boolType();
    syn Type ReturnStmt.expectedType() = intType();


    syn Type Stmt.type() = unknownType();
    syn Type Assignment.type() = ((getLeft().type() == unknownType() || getRight().type() == unknownType()) || (getLeft().type() == expectedType() && getRight().type() == expectedType())) ? expectedType() : unknownType();
    syn Type IdDeclStmt.type() = ((getIdDecl().type() == unknownType()) || (getIdDecl().type() == expectedType())) ? expectedType() : unknownType();
    syn Type FunctionCallStmt.type() = ((getExpr().type() == unknownType()) || (getExpr().type() == expectedType())) ? expectedType() : unknownType();
    syn Type IfElse.type() = ((getIfExpr().type() == unknownType()) || (getIfExpr().type() == expectedType())) ? expectedType() : unknownType();
    syn Type While.type() = ((getExpr().type() == unknownType()) || (getExpr().type() == expectedType())) ? expectedType() : unknownType();
    syn Type ReturnStmt.type() = ((getExpr().type() == unknownType()) || (getExpr().type() == expectedType())) ? expectedType() : unknownType();

/*
    syn boolean IntType.compatibleType(Type otherType){
        if(otherType.equals(IntType) || otherType.equals(unknownType()) ){
        }else if(){
        }else{
            return false;
        }
    }
  */
}
