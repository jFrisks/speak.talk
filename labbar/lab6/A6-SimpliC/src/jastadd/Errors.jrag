import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber);
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	}
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	IdUse contributes error("symbol '" + getID() + "' has not been declared before this use!")
		when decl().isUnknown()
		to Program.errors() for program();

	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiDeclared()
		to Program.errors() for program();

    IdUse contributes error("symbol '" + getID() + "' is a variable but is expected to be a function")
        when isVariableButExpectedFunction()
        to Program.errors() for program();

    IdUse contributes error("symbol '" + getID() + "' is a function but is expected to be a variable")
        when isFunctionButExpectedVaraible()
        to Program.errors() for program();

    IdUse contributes error("symbol '" + getID() + "' has the wrong number of arguments!")
        when getParent() instanceof FunctionCall && decl().isFunction() && (((FunctionDecl) decl().getParent()).getNumParam() != ((FunctionCall) getParent()).getNumExpr())
        to Program.errors() for program();

    Expr contributes error("Type missmatch for " + getClass().getName() + "!")
        when type() != expectedType()
        to Program.errors() for program();

    Stmt contributes error("Type missmatch for " + getClass().getName() + "!")
        when type() != expectedType()
        to Program.errors() for program();

	/*
	IdUse contributes error("the definition of symbol '" + getID() + "' is circular")
		when isCircular()
		to Program.errors() for program();
    */
}
