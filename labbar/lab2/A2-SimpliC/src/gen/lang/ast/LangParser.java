package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short ID = 2;
    public static final short SEMICOLON = 3;
    public static final short RBRACKET = 4;
    public static final short ASSIGN = 5;
    public static final short LBRACKET = 6;
    public static final short LPARAN = 7;
    public static final short RPARAN = 8;
    public static final short NUMERAL = 9;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "ID",
        "SEMICOLON",
        "RBRACKET",
        "ASSIGN",
        "LBRACKET",
        "LPARAN",
        "RPARAN",
        "NUMERAL",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  functionCallStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [1] functionCallStmtList =  functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionCallStmt stmt = (FunctionCallStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    new Action() { // [2] functionCallStmtList =  functionCallStmtList functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final FunctionCallStmt b = (FunctionCallStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [4] functionCallStmt =  INT ID LPARAN RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPARAN = _symbols[offset + 3];
        final Symbol RPARAN = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new FunctionCallStmt(b);
      }
    },
    new Action() { // [5] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [6] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [7] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List a = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(a);
      }
    },
    new Action() { // [8] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [9] stmt =  idDecl SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [10] stmt =  assignment SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [11] idDecl =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id);
      }
    },
    Action.RETURN, // [12] expr =  numeral (default action: return symbol 1)
    new Action() { // [13] assignment =  idUse ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr id = (Expr) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Symbol b = _symbols[offset + 3];
        return new Assignment(id, b);
      }
    },
    new Action() { // [14] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9obbBjI0Z4KXlyi8FUhWEA5qWUmTiRM1$0DxEsirThA1x2szm5iRUsjBPr1vIh2ySyk5Da" +
    "SP1qpyoNauuGJiZaBc0uoI6C30Kg0z9327aUXhQ6EAdRH05313hAXQN5cJTXaBdF4Myupa9" +
    "dCFFVjno6lk8BYYehRHDdBCPMfvxuYbBLD9suY4zixSMqbxvRYjXNNyPMCPUovaOnixqZtd" +
    "#s7SKCPsjvPEv21xHtNL$9#AkuZOTmx3FTJvjreyfuqU7O5Zg0jyBcKU4SgdDV2cn8QpcYY" +
    "PkCarX34pOeuA75PnUKKjw4uusTMywPiFMXhaLxhOkkMlvV89JqNBQ#p5la$xJdf$X8xxhf" +
    "xXUZv8QfeMsjTSa0EoH4v9YVab9oHSt91hiaDkILtv9uya4VoH9x92tabRuIrOmpXMyAq5d" +
    "dxP739RXLiFOO6opa$5zV4pt$xVl7$$jEgh2t3tXAmqW9MNOQdPrXTXYUOucZVsn55KgUlq" +
    "BSujdy0RMzV#G==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
