package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short RPARAN = 1;
    public static final short COMMA = 2;
    public static final short SEMICOLON = 3;
    public static final short PLUS = 4;
    public static final short SUB = 5;
    public static final short ID = 6;
    public static final short GEQ = 7;
    public static final short GREATER = 8;
    public static final short EQ = 9;
    public static final short LESS = 10;
    public static final short INT = 11;
    public static final short NOTEQ = 12;
    public static final short LEQ = 13;
    public static final short LPARAN = 14;
    public static final short DIVIDER = 15;
    public static final short MODULAR = 16;
    public static final short MULTIPLIER = 17;
    public static final short NUMERAL = 18;
    public static final short COMMENT = 19;
    public static final short RETURN = 20;
    public static final short PRINT = 21;
    public static final short RBRACKET = 22;
    public static final short ASSIGN = 23;
    public static final short LBRACKET = 24;

    public static final String[] NAMES = {
        "EOF",
        "RPARAN",
        "COMMA",
        "SEMICOLON",
        "PLUS",
        "SUB",
        "ID",
        "GEQ",
        "GREATER",
        "EQ",
        "LESS",
        "INT",
        "NOTEQ",
        "LEQ",
        "LPARAN",
        "DIVIDER",
        "MODULAR",
        "MULTIPLIER",
        "NUMERAL",
        "COMMENT",
        "RETURN",
        "PRINT",
        "RBRACKET",
        "ASSIGN",
        "LBRACKET",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] programStmtList =  programStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final ProgramStmt stmt = (ProgramStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    Action.RETURN, // [1] programStmt =  comment (default action: return symbol 1)
    new Action() { // [2] comment =  COMMENT
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Comment(a);
      }
    },
    new Action() { // [3] program =  programStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [4] programStmtList =  programStmtList programStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final ProgramStmt b = (ProgramStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [5] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    Action.NONE, // [6] paramDeclareList =  (default action: return null)
    new Action() { // [7] paramDeclareList =  idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl a = (IdDecl) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [8] idDecl =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id);
      }
    },
    new Action() { // [9] paramDeclareList =  paramDeclareList COMMA idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final IdDecl b = (IdDecl) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
    new Action() { // [10] functionCallStmt =  INT ID LPARAN paramDeclareList RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPARAN = _symbols[offset + 3];
        final List a = (List) _symbols[offset + 4].value;
        final Symbol RPARAN = _symbols[offset + 5];
        final Block b = (Block) _symbols[offset + 6].value;
        return new FunctionCallStmt(b);
      }
    },
    new Action() { // [11] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
    new Action() { // [12] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [13] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [14] printStmt =  PRINT paren
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol PRINT = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new PrintStmt(a);
      }
    },
    new Action() { // [15] stmt =  printStmt SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final PrintStmt a = (PrintStmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [16] stmt =  assignment SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Assignment a = (Assignment) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [17] stmt =  returnStmt SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final ReturnStmt a = (ReturnStmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [18] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List list = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(list);
      }
    },
    new Action() { // [19] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [20] stmt =  idDecl SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl a = (IdDecl) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    Action.RETURN, // [21] term =  mul (default action: return symbol 1)
    Action.RETURN, // [22] expr =  comparator (default action: return symbol 1)
    Action.RETURN, // [23] factor =  idUse (default action: return symbol 1)
    Action.RETURN, // [24] comparator =  add (default action: return symbol 1)
    new Action() { // [25] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
    new Action() { // [26] returnStmt =  RETURN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new ReturnStmt(a);
      }
    },
    new Action() { // [27] assignment =  idUse ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Assignment(a,b);
      }
    },
    Action.NONE, // [28] paramList =  (default action: return null)
    new Action() { // [29] paren =  LPARAN expr RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPARAN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Symbol RPARAN = _symbols[offset + 3];
        return a;
      }
    },
    new Action() { // [30] lessEqual =  comparator LEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new LessEq(a, b);
      }
    },
    new Action() { // [31] greaterEqual =  comparator GEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new GreaterEq(a, b);
      }
    },
    new Action() { // [32] greater =  comparator GREATER comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GREATER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Greater(a, b);
      }
    },
    new Action() { // [33] add =  comparator PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Add(a, b);
      }
    },
    new Action() { // [34] less =  comparator LESS comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LESS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Less(a, b);
      }
    },
    new Action() { // [35] equal =  comparator EQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Eq(a, b);
      }
    },
    new Action() { // [36] notEqual =  comparator NOTEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new NotEq(a, b);
      }
    },
    new Action() { // [37] sub =  comparator SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Sub(a, b);
      }
    },
    new Action() { // [38] div =  term DIVIDER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol DIVIDER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Div(a, b);
      }
    },
    new Action() { // [39] mod =  term MODULAR factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MODULAR = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mod(a, b);
      }
    },
    new Action() { // [40] mul =  term MULTIPLIER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MULTIPLIER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mul(a, b);
      }
    },
    new Action() { // [41] paramList =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [42] functionCall =  ID LPARAN paramList RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ID = _symbols[offset + 1];
        final Symbol LPARAN = _symbols[offset + 2];
        final List a = (List) _symbols[offset + 3].value;
        final Symbol RPARAN = _symbols[offset + 4];
        return new FunctionCall();
      }
    },
    new Action() { // [43] paramList =  paramList COMMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcabm55KOn$#JsPeb2LaWJ1AI498Gaaa8sHDm1t713SITL5cb9xruqPFBGSkhNFIaTqz" +
    "oqYezQNdGAgkqoXXHN22uW2nYH2H4y$o$wUxfxddzpBp9P8Z2##et#Rvlth#$zxtfdfcU2c" +
    "3DemmMAX553MhHYXZYg1EV8ua4yy1ALF2nZlaU3A8Nzp5Q0JcQIOeqO3sQ#BSnaEbqvjylf" +
    "mhXH6FeGpVkGLSW#q3cU3BE3Z4VKEnt5FC837yi$aR8oCtwO$5Nc8Bx4HnndxygiAeHhceK" +
    "QMp5DWpXMlHZ7DTW63l2LwZF1kBLsXhNQMhCXTQOqyVYahR6zPeQis9MAL4USfGxUHHxh0b" +
    "vzYu#gsRlTZJLg0fvTc#ePf$KY8lYOiXpzsRNeExAdzAqtJyKqdsvJ$wWxhY1iLPx$0EQtR" +
    "qWBkHrP4$nHpxPGBmXwvKZTxHW7UgLx4QpDN5iCbQq6IlQJGNYV3xPGDnXMcF1tTsirF$TD" +
    "S#tFJVspyqypcJZ6ULeCzAKobkC#zYU4xldm43n5EAtfL#LEATwNaQQalrLzRoCD2LxLlMy" +
    "Z3GbUoPqhMVqiJYjUbv6cf8zfNfUHfgI$SKrpxSzDow2ugGqxCGj36x4JRWPk#ZjnWsvCxE" +
    "A4wvvlksvSH4KFxlc#RQdNLMXdHkC0XG$kURvjkV6Yi9yhtuqML61VVpRwt4hRiFjHehm6g" +
    "Lu1VNlxNjotziBhb421UumcYrh$62gy7roscFXJvohYYjE8OwBuuwRvtS1CUsQvzkU6oirZ" +
    "abpFgFo6kAeD2F5zzAC5D#vvlcs1zrxuhVIZ6fy8yr8SKIQaU9hrppVzg3huolNFD$st5XH" +
    "77RDystFZHN5bwvvlksviTB88tWutvwT6bDYoanHmFVTBwGPhMfIJ6P#pv1tfcdUgzRpw3L" +
    "8ySvqXFUhFK8mFyx75FCfFjk0HaO9mO4qwILzlAVjvz$1OCQRd$bDnuburJUX6IsPx2h$7C" +
    "Or8Zjq2X4OGOK86SLMvAwAhqehxtZRU4VQmVkxJjvjTQ5xKJKgIb33l8y8ojGAuKTndareQ" +
    "cWrieQPHgy8sv5iZQX9z$vzn93kk84QwuknkmlKC7$D4xfPpDHYBTOfsGgpDL5HPwo8ba1X" +
    "lbVcDSntrpuJOuZJJyB22goajnhbVAp46bJvvjOLM6CHVJYnSmwWkeYAagugxxqgXQ8KL#s" +
    "IdebBeGWV$wzLwOwdhs6kMEAzChzgBtCVnQrHd3xuxUuodoLc2fFP6SNo$CIvglYlAxBVaF" +
    "FLBkwz9BzHQiMLsyVoKkJRSy6AWgwF0ZuDW8aNaFbMAlzBe8Rq4$aht6FaMV8gUOkyIuwHI" +
    "q2acdIGdUG0UPgyH0wIzyaHSfRm#svP9Tb1zfEdoClaTV8U#PIS0g8HKa#6oHxoE7cEl4RU" +
    "9X#JQV158Yd2DSQunXZN6ECQOrnZZ6kCVKIunXZN6AyYQRABJ91do2laJV81uHhZvu54EMa" +
    "ZusGVUPAmbyGRv1to6Ja99BbNoGOoIFQI9yYBXBqakSOaUqcU02psOh4NQu2m5ukzMEp5OY" +
    "$M8V8XOI$MdBFlay$pmG$7qToSavyAoHqcd$ZYS#IqHZ$hZrcUwy8XnvyEqomrF4VYf9R8$" +
    "nlZlaLwoHZPBN$fv9GvvxniP#xHHTGvwEjxmkGtqcKuqXZbrRkL390HCifhUPZmB2OHpf1#" +
    "53r8O2pp6ra4WsGR$NuVOvmpwFZDVBwTD99Mqa3wcE$bd278LoUADj91kiWcqaqsaora8sa" +
    "Y6qXBHXD19o$Q8VhR$m5#lVws");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
