package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short RPARAN = 1;
    public static final short COMMA = 2;
    public static final short SEMICOLON = 3;
    public static final short PLUS = 4;
    public static final short SUB = 5;
    public static final short ID = 6;
    public static final short GEQ = 7;
    public static final short GREATER = 8;
    public static final short EQ = 9;
    public static final short LESS = 10;
    public static final short NOTEQ = 11;
    public static final short LEQ = 12;
    public static final short DIVIDER = 13;
    public static final short MODULAR = 14;
    public static final short MULTIPLIER = 15;
    public static final short LPARAN = 16;
    public static final short NUMERAL = 17;
    public static final short INT = 18;
    public static final short RBRACKET = 19;
    public static final short ASSIGN = 20;
    public static final short LBRACKET = 21;

    public static final String[] NAMES = {
        "EOF",
        "RPARAN",
        "COMMA",
        "SEMICOLON",
        "PLUS",
        "SUB",
        "ID",
        "GEQ",
        "GREATER",
        "EQ",
        "LESS",
        "NOTEQ",
        "LEQ",
        "DIVIDER",
        "MODULAR",
        "MULTIPLIER",
        "LPARAN",
        "NUMERAL",
        "INT",
        "RBRACKET",
        "ASSIGN",
        "LBRACKET",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  functionCallStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [1] functionCallStmtList =  functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionCallStmt stmt = (FunctionCallStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    new Action() { // [2] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [3] functionCallStmtList =  functionCallStmtList functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final FunctionCallStmt b = (FunctionCallStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [4] functionCallStmt =  INT ID LPARAN RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPARAN = _symbols[offset + 3];
        final Symbol RPARAN = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new FunctionCallStmt(b);
      }
    },
    new Action() { // [5] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    Action.RETURN, // [6] stmt =  idDecl (default action: return symbol 1)
    new Action() { // [7] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
    new Action() { // [8] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [9] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [10] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List list = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(list);
      }
    },
    new Action() { // [11] idDecl =  INT ID SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new IdDecl(id);
      }
    },
    Action.RETURN, // [12] factor =  paren (default action: return symbol 1)
    Action.RETURN, // [13] comparator =  term (default action: return symbol 1)
    Action.RETURN, // [14] expr =  equal (default action: return symbol 1)
    Action.RETURN, // [15] term =  div (default action: return symbol 1)
    new Action() { // [16] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
    new Action() { // [17] assignment =  idUse ASSIGN expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        final Symbol SEMICOLON = _symbols[offset + 4];
        return new Assignment(a,b);
      }
    },
    Action.NONE, // [18] paramList =  (default action: return null)
    new Action() { // [19] div =  term DIVIDER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol DIVIDER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Div(a, b);
      }
    },
    new Action() { // [20] mod =  term MODULAR factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MODULAR = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mod(a, b);
      }
    },
    new Action() { // [21] mul =  term MULTIPLIER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MULTIPLIER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mul(a, b);
      }
    },
    new Action() { // [22] paren =  LPARAN expr RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPARAN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Symbol RPARAN = _symbols[offset + 3];
        return a;
      }
    },
    new Action() { // [23] paramList =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [24] greaterEqual =  comparator GEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new GreaterEq(a, b);
      }
    },
    new Action() { // [25] lessEqual =  comparator LEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new LessEq(a, b);
      }
    },
    new Action() { // [26] greater =  comparator GREATER comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GREATER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Greater(a, b);
      }
    },
    new Action() { // [27] add =  comparator PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Add(a, b);
      }
    },
    new Action() { // [28] less =  comparator LESS comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LESS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Less(a, b);
      }
    },
    new Action() { // [29] equal =  comparator EQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Eq(a, b);
      }
    },
    new Action() { // [30] notEqual =  comparator NOTEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new NotEq(a, b);
      }
    },
    new Action() { // [31] sub =  comparator SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Sub(a, b);
      }
    },
    new Action() { // [32] functionCall =  ID LPARAN paramList RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ID = _symbols[offset + 1];
        final Symbol LPARAN = _symbols[offset + 2];
        final List a = (List) _symbols[offset + 3].value;
        final Symbol RPARAN = _symbols[offset + 4];
        return new FunctionCall();
      }
    },
    new Action() { // [33] paramList =  paramList COMMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcKbi74KKXlzspKo2iPEn7JksoOP9WdUF7VQmXIn00aG83Y0a94u82OaRd90vW01nH5p" +
    "OXCG9SK18S4D2d43SavmIbh04WY74pihIVDtJFTCzKptJdM70HDJJrrrTzTVhLpNTuteUgV" +
    "2MEfJNIXdtiBhKevoyqgEj6jQaRWxEjwXS2lvnZLPnNCrvm3zBnK1tgwfbHT2sMUireuswJ" +
    "6EQrfGswGgjqvKQrmQDQ8idTLsBTXVQQEaedzm$BThTSIsQShaaLGnN#MF#IANTwMj$3$pV" +
    "PXcpfnnBHTDPexdTCkQE8FvBBNrtqXTltUTh#opQlMYxrQkQulvMsr9VAfh#LEjmZp$cV8A" +
    "ly$Kzxha4xJbBJrz2aDrQMzSscA2rtUjiUerx9hHelTeMglnZbhaDPOZtT59xVOzxAeM$K3" +
    "DXwHpLvTOnImc#bkfxtCNGelLgMqnxChHedQkIPZLNe$tLisQp2xGdGelMgstBpkyleKNhr" +
    "ROBzjkckMbREf##topFGuPuCps$IS#PJPjbpHf$FrmTq$uTxqLolDVh9YwkqNNQhXjqewwr" +
    "QhDynhRltuJrRPVM$TdgWNPBpmwxrZf#mLq8gisVecMm3XUprlqfj6YzsXRJ7WyjMg#snRG" +
    "$XXQjLzjYsXz2YzQhRR5oj#wopjasjsFkiTJQxpqBtkDcskyyIwdzrhEKscz2YzQvilqzFk" +
    "fPIhzVUvPI#vLdARLVXXQjSsM9DzFVYoyyQtv$Ntl4FS9kUmAROezS8X#QTIcS1zYf3hBN2" +
    "ywkNrJmZsCQvpWPdc4khlDLglWOPW##Zjtu1dRZcuXwX9tuPZAdhUp6HnjftKXHRsE$Lcsn" +
    "zHZisi3$J78ibHYSEatocFw466fQovz5WhPNVMvD2UDjL2hn9lcrhKCXoPSbXdPfrzYrrl5" +
    "Pri4XOpVAAKzzXLQIYtUIttQHmwtIwlZTCyLhCiIRnM#cpzZILrHFop6aMhCBrJQVt$z#$u" +
    "4OiZo$xPfRbkSt8OPaRSeO6ivDnVJQLkDjJMkDeSNlXtPf$NRhzuvTQntFEgIDPhckmqMZR" +
    "UlVY$PeRVD8cbiMRHZ3Sj1cMRF$HBoPdydczwzefVtFoDzzUV$NASAal5zMf0VWONWMNeNt" +
    "u7qu22SbXx7E84p3BY0tTvw4b#1r#10#0p9QPqdgw8Gji1tkXKVXQNWPte6FuG0Sbum3$J0" +
    "5E#5#U0AUWzU0ECodS1WMfLmEXg44U#0HU0fUW3VX0$WSo5PpfwLy5um0cMx#FdWCvk4LU1" +
    "S#WKEm81KC3C4Cx8Q7u75u7ju8rkxWF8Vvyh8U2kjHA0VWXALzoQOFmVtQHltDOFo3ZVeff" +
    "y3xdQGxCeQrzdyJytvlUn5OSxqTVFwikpvg8Px5I7r$kap$NomZh8EZMPZcRPc52UKrn$Ku" +
    "bBWUu3p7kSJxF0b3N6#4KLWFWp36cyxpGqvgo4eDUQaXIpMqEUIZXgpKa9iQSbL3Tch8L0r" +
    "tDkIjXipL6skqxI$QaLb4");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
