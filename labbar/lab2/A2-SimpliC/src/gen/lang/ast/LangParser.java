package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short RBRACKET = 2;
    public static final short SEMICOLON = 3;
    public static final short ID = 4;
    public static final short LBRACKET = 5;
    public static final short LPARAN = 6;
    public static final short RPARAN = 7;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "RBRACKET",
        "SEMICOLON",
        "ID",
        "LBRACKET",
        "LPARAN",
        "RPARAN",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  functionCallStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [1] functionCallStmtList =  functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionCallStmt stmt = (FunctionCallStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    new Action() { // [2] functionCallStmtList =  functionCallStmtList functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final FunctionCallStmt b = (FunctionCallStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [4] functionCallStmt =  INT ID LPARAN RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPARAN = _symbols[offset + 3];
        final Symbol RPARAN = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new FunctionCallStmt(b);
      }
    },
    new Action() { // [5] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
    new Action() { // [6] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [7] stmt =  idDecl SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [8] idDecl =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id);
      }
    },
    new Action() { // [9] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List list = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(list);
      }
    },
    new Action() { // [10] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9oLahjEmq0GHQ$NTa829kOLKIA#W19gVe2EbeQEdj9qLFHqI7mZIPo4P3WcAR8Z2ukHZbP" +
    "thcUyEnf9dmhArRSlfTfN9gcdGvLmfYQEpFXYD$OY9LlREaeCdB#oLQI$Orz3fmzS$TAMKM" +
    "Aa8l8NjeZyOzVlnFMRszprEutyskf8prpzrAQHdjX42QyOSlE26OwOMCQK1Wr6C4ifiPsWo" +
    "cBj$5w7x#lxJkSTzOd2dtxgwZEdVNsNzlrQxaDk$ABDopYQJIpX72xW4gxW6cxW5kxW7XxW" +
    "4PxW6IfuXJTuXuzjtrcr#LtTd6qGYsfxF##HIrjoO$qls0zUM$mIs9Z0tkHa0rkIi3E1hGd" +
    "e51rK$W3$xcRB");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
