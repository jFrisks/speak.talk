package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short ID = 2;
    public static final short SEMICOLON = 3;
    public static final short PLUS = 4;
    public static final short MULTIPLIER = 5;
    public static final short RBRACKET = 6;
    public static final short NUMERAL = 7;
    public static final short ASSIGN = 8;
    public static final short RPARAN = 9;
    public static final short LBRACKET = 10;
    public static final short LPARAN = 11;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "ID",
        "SEMICOLON",
        "PLUS",
        "MULTIPLIER",
        "RBRACKET",
        "NUMERAL",
        "ASSIGN",
        "RPARAN",
        "LBRACKET",
        "LPARAN",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program =  functionCallStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [1] functionCallStmtList =  functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionCallStmt stmt = (FunctionCallStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    new Action() { // [2] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [3] functionCallStmtList =  functionCallStmtList functionCallStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final FunctionCallStmt b = (FunctionCallStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [4] functionCallStmt =  INT ID LPARAN RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPARAN = _symbols[offset + 3];
        final Symbol RPARAN = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new FunctionCallStmt(b);
      }
    },
    Action.RETURN, // [5] stmt =  idDecl (default action: return symbol 1)
    new Action() { // [6] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
    new Action() { // [7] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [8] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [9] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List list = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(list);
      }
    },
    new Action() { // [10] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [11] idDecl =  INT ID SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new IdDecl(id);
      }
    },
    Action.RETURN, // [12] factor =  numeral (default action: return symbol 1)
    Action.RETURN, // [13] expr =  factor (default action: return symbol 1)
    new Action() { // [14] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
    new Action() { // [15] assignment =  idUse ASSIGN expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        final Symbol SEMICOLON = _symbols[offset + 4];
        return new Assignment(a,b);
      }
    },
    new Action() { // [16] add =  expr PLUS factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Add(a, b);
      }
    },
    new Action() { // [17] mul =  expr MULTIPLIER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MULTIPLIER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mul(a, b);
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pDbhjI554GXllCiCjzXUKYSX4lG9MPYPa4F00PLHIfLJw0aU4Q61aOaXYPcHYH#0e#WGz" +
    "WZAp87TpswvaTQWTEusvXO9$wptJ$f#S$PsvzHYJiI2eL6P0#CKjaH4HtPHo$AZMPb8cCjt" +
    "YC#2vnF$vzcPSv#YLwaLbBKKLfKHPWbpEsRThIbaHCVyTOR31EwuLUH0U679rXXn#LUjkxK" +
    "z8$r$De$fIpdZCzAxmIVwgdVvbtkiJFEFedrdAlgtcFzRZmIaBt7FqZFOhoXtfOUAM1#gNt" +
    "e9H$e0U5Lyf$A8$aSKJ$bxK8ls#j1xvNdP$M8dnJcuLN6d2krxqFUzOY#Z#iIU2ykamgnbS" +
    "qHJyh8$Js5ex9UCPRF9t7abZCErFBUwA9B4TGck6Pjjd2ZDU8sNSPvOSTtjCPTFA773xO5M" +
    "HUjIlzv1$fUFa3ZdvAvQjSpt1rF3vrz7jTv#LzaFxkvYtMVqN$V#DxlLwFlt5UxlRA6ydVU" +
    "GxiPLcjNG9FmNEm2ZR09dW1NeEtu3tu03w17V05V0NVm7Um2zX$0hjVe0A4HV04F0DhO1ri" +
    "WPVW5MY0Ts0RV0IVs#lQQz0ryaKt2xyJs3veNUKvlHhBxnYltJJUaMUx#Nn7l7AzQjtAwbI" +
    "umBz3eCOb71EO2bKji9VQ7qRWgPYVSaoeTocrBF1d4QXsWTNrKU5IQbmgSty0jlIEOW==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
