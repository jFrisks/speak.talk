%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, INT, LPARAN, RPARAN, LBRACKET, RBRACKET, NUMERAL, ASSIGN;

%typeof program = "Program";
%typeof functionCallStmt = "FunctionCallStmt";
%typeof functionCallStmtList = "List";
%typeof stmtList = "List";
%typeof block = "Block";
%typeof idDecl = "Stmt";
%typeof idUse = "Expr";
%typeof assignment = "Stmt";
%typeof numeral = "Expr";

%goal program;

program = functionCallStmtList.a {: return new Program(a); :} ;

functionCallStmtList =
  functionCallStmt.a {: return new List().add(a); :}
  | functionCallStmtList.list functionCallStmt.b {: return list.add(b); :}
  ;

functionCallStmt = INT ID LPARAN RPARAN block.b {: return new FunctionCallStmt(b); :} ;

stmtList =
  stmt.a {: return new List().add(a); :}
  | stmtList.a stmt.b {: return a.add(b); :}
  ;

stmt =
  idDecl.a {: return new IdDecl(a); :}
  | assignment.a {: return new Assignment(a); :}
  ;

block = LBRACKET RBRACKET {: return new Block(); :} ;

assignment =
  idUse.a ASSIGN expr.b {: return new Assignment(a, b); :} ;

numeral = NUMERAL.a {: return new Numeral(a); :} ;

idUse = ID.id {: return new IdUse(id); :} ;

idDecl = INT ID.id {: return new IdDecl(id); :} ;

expr =
  numeral.a {: return new Numeral(a); :}
  | idUse.id {: return new IdUse(id); :}
  ;

