%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT, LPARAN, RPARAN, LBRACKET, RBRACKET, SEMICOLON, ASSIGN;

%typeof program = "Program";
%typeof functionCallStmt = "FunctionCallStmt";
%typeof functionCallStmtList = "List";
%typeof stmt = "Stmt";
%typeof stmtList = "List";
%typeof block = "Block";
%typeof idDecl = "IdDecl";
%typeof assignment = "Assignment";
%typeof idUse = "IdUse";
%typeof numeral = "Numeral";
%typeof factor = "Factor";

%goal program;

program = functionCallStmtList.a {: return new Program(a); :} ;

functionCallStmtList =
  functionCallStmt.stmt {: return new List().add(stmt); :}
  | functionCallStmtList.list functionCallStmt.b {: return list.add(b); :}
  ;

functionCallStmt = INT ID LPARAN RPARAN block.b {: return new FunctionCallStmt(b); :} ;

block =
    LBRACKET stmtList.list RBRACKET {: return new Block(list); :}
    | LBRACKET RBRACKET {: return new Block(); :} ;

stmt =
  idDecl
  | assignment
  ;

assignment =
  idUse.a ASSIGN factor.b SEMICOLON {: return new Assignment(a,b); :};

idUse = ID.id {: return new IdUse(id); :};

factor =
  numeral
  | idUse;

numeral = NUMERAL.a {: return new Numeral(a); :};

stmtList =
    stmt.a {: return new List().add(a); :}
    | stmtList.a stmt.b {: return a.add(b); :} ;

idDecl = INT ID.id SEMICOLON {: return new IdDecl(id); :} ;