aspect Visitor {
	/**
	 * Visitor interface for Calc language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Assignment node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(Eq node, Object data);
		public Object visit(FunctionCall node, Object data);
		public Object visit(FunctionCallStmt node, Object data);
		public Object visit(FunctionDecl node, Object data);
		public Object visit(Greater node, Object data);
		public Object visit(GreaterEq node, Object data);
		public Object visit(IfElse node, Object data);
		public Object visit(Less node, Object data);
		public Object visit(LessEq node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Neg node, Object data);
		public Object visit(NotEq node, Object data);
		public Object visit(ReturnStmt node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(While node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Let.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Binding.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Ask.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
