import java.io.PrintStream;

aspect PrettyPrint {
	public void ASTNode.prettyPrint(PrintStream out) {
		prettyPrint(out, "");
		out.println();
	}

	public void ASTNode.prettyPrint(PrintStream out, String ind) {
	  for (ASTNode child : astChildren()) {
		  child.prettyPrint(out, ind);
		}
	}

  public void Mod.prettyPrint(PrintStream out, String ind) {
      getLeft().prettyPrint(out, ind);
      out.print(" % ");
      getRight().prettyPrint(out, ind);
  }

	public void Mul.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" * ");
		getRight().prettyPrint(out, ind);
	}

	public void Div.prettyPrint(PrintStream out, String ind) {
		getLeft().prettyPrint(out, ind);
		out.print(" / ");
		getRight().prettyPrint(out, ind);
	}

	public void Add.prettyPrint(PrintStream out, String ind) {
    getLeft().prettyPrint(out, ind);
    out.print(" + ");
    getRight().prettyPrint(out, ind);
  }

  public void Sub.prettyPrint(PrintStream out, String ind) {
    getLeft().prettyPrint(out, ind);
    out.print(" - ");
    getRight().prettyPrint(out, ind);
  }

	public void Numeral.prettyPrint(PrintStream out, String ind) {
		out.print(getNUMERAL());
	}

	public void IdUse.prettyPrint(PrintStream out, String ind) {
		out.print(getID());
	}

	public void IdDecl.prettyPrint(PrintStream out, String ind) {
		out.print("int ");
		out.print(getID());
        out.println(";");
	}

	public void Block.prettyPrint(PrintStream out, String ind) {
    out.println("{");
    for (ASTNode child : getStmtList()) {
      String newIndent = ind + "    ";
      out.print(newIndent);
      child.prettyPrint(out,newIndent);
    }
    out.print(ind+"}");
  }

  public void Eq.prettyPrint(PrintStream out, String ind) {
    getLeft().prettyPrint(out, ind);
    out.print(" == ");
    getRight().prettyPrint(out, ind);
  }

  public void NotEq.prettyPrint(PrintStream out, String ind) {
      getLeft().prettyPrint(out, ind);
      out.print(" != ");
      getRight().prettyPrint(out, ind);
    }

  public void Less.prettyPrint(PrintStream out, String ind) {
      getLeft().prettyPrint(out, ind);
      out.print(" < ");
      getRight().prettyPrint(out, ind);
    }

public void Greater.prettyPrint(PrintStream out, String ind) {
      getLeft().prettyPrint(out, ind);
      out.print(" > ");
      getRight().prettyPrint(out, ind);
    }

    public void GreaterEq.prettyPrint(PrintStream out, String ind) {
          getLeft().prettyPrint(out, ind);
          out.print(" >= ");
          getRight().prettyPrint(out, ind);
        }

    public void LessEq.prettyPrint(PrintStream out, String ind) {
          getLeft().prettyPrint(out, ind);
          out.print(" <= ");
          getRight().prettyPrint(out, ind);
        }


  public void FunctionDecl.prettyPrint(PrintStream out, String ind) {
    out.print("int ");
    out.print(getID());
    out.print("() ");
    getBlock().prettyPrint(out, ind);
    out.println();
  }

    public void Assignment.prettyPrint(PrintStream out, String ind) {
        getIdUse().prettyPrint(out, ind);
        out.append(" = ");
        getExpr().prettyPrint(out, ind+"    ");
        out.println(";");
    }

    public void ReturnStmt.prettyPrint(PrintStream out, String ind) {
        out.print("return ");
        getExpr().prettyPrint(out, ind);
        out.println(";");
      }

  public void While.prettyPrint(PrintStream out, String ind) {
    out.print("while");
    out.print(" (");
    getExpr().prettyPrint(out, ind);
    out.print(") ");
    getBlock().prettyPrint(out,ind);
    out.println();
  }

  public void IfElse.prettyPrint(PrintStream out, String ind) {
      out.print("if");
      out.print(" (");
      getIfExpr().prettyPrint(out, ind);
      out.print(") ");
      getIf().prettyPrint(out,ind);
      if (hasElse()) {
        out.print(" else ");
        getElse().prettyPrint(out,ind);
      }
      out.println();
    }

    public void FunctionCall.prettyPrint(PrintStream out, String ind) {
        out.print(getID());
        out.print("(");
        for (ASTNode child : getExprList()) {

          child.prettyPrint(out, ind);
        }
        out.println();
      }


}
