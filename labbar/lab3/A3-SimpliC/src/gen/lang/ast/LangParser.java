package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short SUB = 1;
    public static final short SEMICOLON = 2;
    public static final short RPARAN = 3;
    public static final short COMMA = 4;
    public static final short ID = 5;
    public static final short PLUS = 6;
    public static final short LPARAN = 7;
    public static final short GEQ = 8;
    public static final short GREATER = 9;
    public static final short EQ = 10;
    public static final short LESS = 11;
    public static final short INT = 12;
    public static final short NOTEQ = 13;
    public static final short LEQ = 14;
    public static final short DIVIDER = 15;
    public static final short MODULAR = 16;
    public static final short MULTIPLIER = 17;
    public static final short NUMERAL = 18;
    public static final short IF = 19;
    public static final short RETURN = 20;
    public static final short RBRACKET = 21;
    public static final short WHILE = 22;
    public static final short LBRACKET = 23;
    public static final short ASSIGN = 24;
    public static final short ELSE = 25;

    public static final String[] NAMES = {
        "EOF",
        "SUB",
        "SEMICOLON",
        "RPARAN",
        "COMMA",
        "ID",
        "PLUS",
        "LPARAN",
        "GEQ",
        "GREATER",
        "EQ",
        "LESS",
        "INT",
        "NOTEQ",
        "LEQ",
        "DIVIDER",
        "MODULAR",
        "MULTIPLIER",
        "NUMERAL",
        "IF",
        "RETURN",
        "RBRACKET",
        "WHILE",
        "LBRACKET",
        "ASSIGN",
        "ELSE",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] program = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new Program();
      }
    },
    new Action() { // [1] program =  programStmtList
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        return new Program(a);
      }
    },
    new Action() { // [2] programStmtList =  programStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final ProgramStmt stmt = (ProgramStmt) _symbols[offset + 1].value;
        return new List().add(stmt);
      }
    },
    Action.RETURN, // [3] programStmt =  functionDecl (default action: return symbol 1)
    new Action() { // [4] idDecl =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id);
      }
    },
    new Action() { // [5] programStmtList =  programStmtList programStmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List list = (List) _symbols[offset + 1].value;
        final ProgramStmt b = (ProgramStmt) _symbols[offset + 2].value;
        return list.add(b);
      }
    },
    new Action() { // [6] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [7] paramDeclareList =  idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl a = (IdDecl) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [8] functionDecl =  idDecl LPARAN RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl id = (IdDecl) _symbols[offset + 1].value;
        final Symbol LPARAN = _symbols[offset + 2];
        final Symbol RPARAN = _symbols[offset + 3];
        final Block b = (Block) _symbols[offset + 4].value;
        return new FunctionDecl(id, new List(), b);
      }
    },
    new Action() { // [9] stmt =  ifElse
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IfElse a = (IfElse) _symbols[offset + 1].value;
        return a;
      }
    },
    new Action() { // [10] stmtList =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt a = (Stmt) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [11] stmt =  while
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final While a = (While) _symbols[offset + 1].value;
        return a;
      }
    },
    new Action() { // [12] functionCallStmt =  functionCall
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new FunctionCallStmt(a);
      }
    },
    new Action() { // [13] idDeclStmt =  idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl a = (IdDecl) _symbols[offset + 1].value;
        return new IdDeclStmt(a);
      }
    },
    new Action() { // [14] block =  LBRACKET RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final Symbol RBRACKET = _symbols[offset + 2];
        return new Block();
      }
    },
    new Action() { // [15] idUse =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [16] paramDeclareList =  paramDeclareList COMMA idDecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final IdDecl b = (IdDecl) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
    new Action() { // [17] functionDecl =  idDecl LPARAN paramDeclareList RPARAN block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl id = (IdDecl) _symbols[offset + 1].value;
        final Symbol LPARAN = _symbols[offset + 2];
        final List a = (List) _symbols[offset + 3].value;
        final Symbol RPARAN = _symbols[offset + 4];
        final Block b = (Block) _symbols[offset + 5].value;
        return new FunctionDecl(id, a, b);
      }
    },
    new Action() { // [18] stmt =  returnStmt SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final ReturnStmt a = (ReturnStmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [19] stmtList =  stmtList stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Stmt b = (Stmt) _symbols[offset + 2].value;
        return a.add(b);
      }
    },
    new Action() { // [20] block =  LBRACKET stmtList RBRACKET
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACKET = _symbols[offset + 1];
        final List list = (List) _symbols[offset + 2].value;
        final Symbol RBRACKET = _symbols[offset + 3];
        return new Block(list);
      }
    },
    new Action() { // [21] stmt =  functionCallStmt SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionCallStmt a = (FunctionCallStmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    Action.RETURN, // [22] term =  mod (default action: return symbol 1)
    Action.RETURN, // [23] expr =  greaterEqual (default action: return symbol 1)
    Action.RETURN, // [24] comparator =  add (default action: return symbol 1)
    Action.RETURN, // [25] posFactor =  idUse (default action: return symbol 1)
    Action.RETURN, // [26] factor =  posFactor (default action: return symbol 1)
    new Action() { // [27] numeral =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol a = _symbols[offset + 1];
        return new Numeral(a);
      }
    },
    new Action() { // [28] returnStmt =  RETURN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new ReturnStmt(a);
      }
    },
    new Action() { // [29] stmt =  idDeclStmt SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDeclStmt a = (IdDeclStmt) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [30] stmt =  assignment SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Assignment a = (Assignment) _symbols[offset + 1].value;
        final Symbol SEMICOLON = _symbols[offset + 2];
        return a;
      }
    },
    new Action() { // [31] functionCall =  idUse LPARAN RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol LPARAN = _symbols[offset + 2];
        final Symbol RPARAN = _symbols[offset + 3];
        return new FunctionCall(a, new List());
      }
    },
    new Action() { // [32] paramList =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        return new List().add(a);
      }
    },
    new Action() { // [33] assignment =  idUse ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Assignment(a,b);
      }
    },
    new Action() { // [34] factor =  SUB posFactor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol SUB = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        return new Neg(a);
      }
    },
    new Action() { // [35] assignment =  idDecl ASSIGN expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl a = (IdDecl) _symbols[offset + 1].value;
        final Symbol ASSIGN = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Assignment(a,b);
      }
    },
    new Action() { // [36] ifElse =  IF paren block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Block b = (Block) _symbols[offset + 3].value;
        return new IfElse(a,b, new Opt());
      }
    },
    new Action() { // [37] while =  WHILE paren block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Block b = (Block) _symbols[offset + 3].value;
        return new While(a,b);
      }
    },
    new Action() { // [38] functionCall =  idUse LPARAN paramList RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdUse a = (IdUse) _symbols[offset + 1].value;
        final Symbol LPARAN = _symbols[offset + 2];
        final List b = (List) _symbols[offset + 3].value;
        final Symbol RPARAN = _symbols[offset + 4];
        return new FunctionCall(a, b);
      }
    },
    new Action() { // [39] lessEqual =  comparator LEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new LessEq(a, b);
      }
    },
    new Action() { // [40] greaterEqual =  comparator GEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new GreaterEq(a, b);
      }
    },
    new Action() { // [41] greater =  comparator GREATER comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol GREATER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Greater(a, b);
      }
    },
    new Action() { // [42] add =  comparator PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Add(a, b);
      }
    },
    new Action() { // [43] less =  comparator LESS comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol LESS = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Less(a, b);
      }
    },
    new Action() { // [44] equal =  comparator EQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Eq(a, b);
      }
    },
    new Action() { // [45] notEqual =  comparator NOTEQ comparator
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new NotEq(a, b);
      }
    },
    new Action() { // [46] sub =  comparator SUB term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol SUB = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Sub(a, b);
      }
    },
    new Action() { // [47] div =  term DIVIDER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol DIVIDER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Div(a, b);
      }
    },
    new Action() { // [48] mod =  term MODULAR factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MODULAR = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mod(a, b);
      }
    },
    new Action() { // [49] mul =  term MULTIPLIER factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr a = (Expr) _symbols[offset + 1].value;
        final Symbol MULTIPLIER = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return new Mul(a, b);
      }
    },
    new Action() { // [50] paren =  LPARAN expr RPARAN
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPARAN = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Symbol RPARAN = _symbols[offset + 3];
        return a;
      }
    },
    new Action() { // [51] paramList =  paramList COMMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List a = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expr b = (Expr) _symbols[offset + 3].value;
        return a.add(b);
      }
    },
    new Action() { // [52] ifElse =  IF paren block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Expr a = (Expr) _symbols[offset + 2].value;
        final Block b = (Block) _symbols[offset + 3].value;
        final Symbol ELSE = _symbols[offset + 4];
        final Block c = (Block) _symbols[offset + 5].value;
        return new IfElse(a,b,new Opt(c));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcbji5KKOn$yzFQStRkLQe2qzK6gvjQM5KbfQ456y82AWeY8gYeA23pweyKMD9cfYeZ7" +
    "HDtrGOtpmmGTDY8a9CSR42wW85F26Yd8H5GkYNCJnFpjBzp9xzfmPoW4Cy#Mtytqpyv#PdP" +
    "tTFJsdG5ct44XX86fvB4OvnlCu6aEHH095A4MX#0INOO1JTXFcusQi1L02cQf91KRnE0nLg" +
    "C5mZ6JPY53P1ASjnBzeHnFcO2awNMyglRiuZXTDGJDcOIOcOmMcer6S3DNTxjH1ArUQMwK6" +
    "PP5rqvowkMX0AxfmCJhG0Y$rowgvCgmH$$WqTxFWYeXohw$RdFCv8SrfTIAorKfdHBWjL7u" +
    "yr7ALkmRXSjN37KuF$NrrgvrkebVvJjzunxAkmLNQkWtAgbccQOPWS5RLZK6LE2gEPjNS6n" +
    "ef3NzA1AAngCGOZ4CeYR$39V7b4JtdbWPPQEgojhWeN23#YekKQRtKcqyjwrfFrDSQayo74" +
    "KVY8cMQvi#uI9ccEMm#DxIvUPhCZcmnGokvn7mOSSYWyJnNqzEhxl5NXoDbRisb5dFxGvdd" +
    "XQDWQoUBNgluPA4H1yL1OytlPkLEallWSfZj0ukz8twBYvHfcb$Z8cMQve3kHKNANF#NG5q" +
    "eKgQDir#Pz8AHv$U9PfyqlJmkYRtAf1UCv363PeyowQ7E7tc#flbPcVI2aUUVhJN0abxLDU" +
    "HgBCIrM4HlCHPaN0ERTREvFZyfarumydmjfP7x$Nbg79krzky3vBWF#dgFNeVhSKCVpMsts" +
    "RoSPFDyozUwsMX#Z8kKQIARDVWXBbAczMBpsT928xvN9hrWvFbQkWNBZSVP9NOPQxupLS3k" +
    "yzi5JTuqubjbqWj6dd#svcQbMHFPBZQ9RomqNyT5ofpW7b$vLu5MeKYPDf3DDTsfJ7h1oFE" +
    "rj4Jia0RrEIItj4HibsQewPPceX7Rb4al6F6OuHtCSRPACvpR5cc6cY#bcMZ4PcNI2qOyPl" +
    "fCyOKowGKZpzSqdokJNZ3oV4tpcJBf1IFFrpIRb4al67c#rzPrRDwD6yL6OysdSP4okeskj" +
    "Q29reBHgCHCz4S7ZvteGXNlFLdMH8yjvBUxWWcDP2gQUPJVcRNoNcnZB#tXCk4aZYFxg48r" +
    "nlYy6exZZz8OYt6enNZKETyzHTInhpXDSKnTFIPW8YPXCgQWGVIcw75CD8ndkULnSqkW44c" +
    "dLSmitNv6niqjopY5mRd5jpwDDQYmq705J5LMcfJm9VGFH4Cn3CCnGeGIxuh855JdNfTHKs" +
    "6XASxQOgHMOhC62OkvdSlZv6jk1TvuqTSAG$fa70EDzmpfBSbnDJ3ARWrEFU5Gn2TS2KfHX" +
    "dwC1c0Wttdb6ApFBlk#ZXZ7HkC#UOqqDi#30ZcMuJwmsJlvkXTizexDEBwzGxBidTFG9Cnt" +
    "GjmukMYotml$$pN8MTF7Syku1WRtsccDSmvSdxwTczcyr3XkRlHCpDEwsMYidc#Uzem#usq" +
    "#MzfeRAwFpJlOHfEtFNf1ap#DpVFj73wVmgXsyUbC$is4KUQQG7dUhgbVariwEveBvtC#Qq" +
    "wz4wtUZJRlh1pkEG3h7lE#mXrEfaDzzxwIF4vU8kyG#OtuNg0WIOf9Arb4LfCdoGlaDRA9x" +
    "0SIHQIQT935P2rvch1DuZtIJGu1XMMaZhIJfUH#yYnvWxnFjfCU85bEs2uvZwmW3vBdoPla" +
    "GxAB70LIGqa3cKzu3gc7o8laBV8HsKrE0aKyzw9cie2i8eyGjYjwctnCDfC3G74bcKOMaZN" +
    "a2V8oMK$OffXjIbAaXl0SIdWE9VUHfyWhv5sobR1TATkLrf8kiepmN4kV8Q#J3MGdEGoK3I" +
    "3rP2vPJXuW3nEkITa6URru2RSygYvbjyoZODhgvjjzPGVTV1lP4Mf$BDm7XrgKeUyZvBYld" +
    "Vnbxa2ckUGA#wZCN5UGYYXBk$FPG$P5z2V$KvJhYES8zonU9HyG#TlWUhTDcl2wOdD4$nqs" +
    "vy6qtpU7TQQ$ivn7gHMymqa1EibCqiXdOYVf8hCPjo29DkRjHEPJoNJInFfAvhFvT6j1YdN" +
    "o$xyJB2zq$B6icqJ6asfIGyQG6QnhSndDjhDOrigyXh7Cfv5cvnUB92Opdq0c4lahHZsPGX" +
    "f87KcJMZAEL3bzINqAS$u3cBOoRm==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
